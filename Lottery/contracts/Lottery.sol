// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Lottery {
    address public owner;
    address payable[] players;

    // This sets the least amount of ether that a user must send to the contract
    // address before he/she can be added to the
    // players and therefore eligible for the lottery
    // Any amount less than the this will be returned back to the user.
    uint256 public stakeAmount = 1 ether;

    uint256 ownerPercentage = 10;

    constructor() {
        owner = msg.sender;
    }

    modifier stakeIsEnough() {
        require(msg.value >= stakeAmount, "Stake is not enough");
        _;
    }

    modifier adminsCannotPlay() {
        require(msg.sender != owner, "Sorry! Admins cannot play");
        _;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    modifier upToTenPlayers() {
        require(players.length >= 0, "There must be up to 10 players");
        _;
    }

    modifier playersLengthMustBeZero() {
        require(players.length == 0, "Players length must be xero");
        _;
    }

    receive() external payable stakeIsEnough adminsCannotPlay {
        players.push(payable(msg.sender));
    }

    function getPlayers() external view returns (address payable[] memory) {
        return players;
    }

    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }

    // internal -> signifies that the function must only be called inside the
    // contract or inside a contract
    // calling this contract(the child of the contract).
    function generateRandomNumber() internal view returns (uint256) {
        // returns an unsigned integer amongst 0 and players.length - 1
        // block.difficulty -> returns an unsigned integer which is the block difficulty of the current block.
        // The difficulty of a block is the measure of how difficult it is to mine it.
        // Due to the fact that this number is a dynamic value, It helps to increase the randomness of the value generated
        // block.timestamp -> eturns an unsigned integer which is the block timestamp of the current block. Basically,
        // time as seconds since unix epoch
        // abi.encodePacked() -> encodes the values into bytes since keccak256 only
        // accepts bytes
        // keccak256(...) -> This hashes the value of abi.encodePacked(block.difficulty, block.timestamp, players.length)
        // into a bytes32 hex value.
        // uint(keccak256(...)) -> casts the hash generated by keccak256(...) into an unsigned integer
        // uint(keccak256(...)) % players.length -> The value of uint(keccak256(...)) could either be 0 or a very large
        // number so we perform a modulo operation on the value of uint(keccak256(...)) to make sure the value is
        // amongst 0 and players.length - 1
        return
            uint256(
                keccak256(
                    abi.encodePacked(
                        block.difficulty,
                        block.timestamp,
                        players.length
                    )
                )
            ) % players.length;
    }

    function pickWinner() external onlyOwner upToTenPlayers {
        address payable winner;
        uint256 amountSendable = address(this).balance -
            (address(this).balance / ownerPercentage);

        winner = players[generateRandomNumber()];
        winner.transfer(amountSendable);
        // empties the players array to prepare for another round
        players = new address payable[](0);
    }

    // After every round, the owner of the contract must withdraw his/her share of that round.
    function withdraw() external onlyOwner playersLengthMustBeZero {
        // Casts the owner into a payable address and sends his/her share of the lottery round.
        payable(owner).transfer(address(this).balance);
    }
}
